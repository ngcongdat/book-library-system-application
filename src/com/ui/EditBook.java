/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ui;

import com.dal.AuthorDAO;
import com.dal.PublisherDAO;
import com.entity.Author;
import com.entity.Book;
import com.entity.Publisher;
import com.entity.Users;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author tiny
 */
public class EditBook extends javax.swing.JDialog {
  
  // Reference to parent frame which is MyBook
  MyBook myBook;
  // Model for lstAvaibleAuthors
  DefaultListModel<Author> modelAvailableAuthors;
  // Model for lstSelectedAuthors
  DefaultListModel<Author> modelSelectedAuthor;
  // Model for combobox
  DefaultComboBoxModel<Publisher> modelPublishers;
  
  private static Users user;
  
   // Creates new form EditBook
  public EditBook(java.awt.Frame parent, boolean modal, Users u) {
    super(parent, modal);
        initComponents();
        myBook = (MyBook) parent;
        user = u;
        //set model for list
        lstAvailableAuthors.setModel(modelAvailableAuthors = new DefaultListModel<>());
        lstSelectedAuthors.setModel(modelSelectedAuthor = new DefaultListModel<>());
        cboPublisher.setModel(modelPublishers = new DefaultComboBoxModel<>());
        //show all available authors and publishers
        listAuthors();
        listPublishers();
        //show information of selected book
        showBook(myBook.getSelectedBookID());
  }

  //Load and output all available authors to lstAvailableAuthor
  public void listAuthors() {
    try {
      List<Author> authors = new AuthorDAO().selectAll();
      for (Author a : authors) {
        modelAvailableAuthors.addElement(a);
      }
    } catch (Exception ex) {
      Logger.getLogger(EditBook.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  // Load all publishers
  public void listPublishers() {
    try {
      List<Publisher> publishers = new PublisherDAO().selectAll();
      for (Publisher p : publishers) {
        modelPublishers.addElement(p);
      }
    } catch (Exception ex) {
      Logger.getLogger(EditBook.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  // Output information of selected book to the form
  public void showBook(String bookID) {
    try {
      Book book = myBook.bookController.getBookByBookID(bookID);
      txtBookID.setText(book.getId());
      txtBookTitle.setText(book.getTitle());
      txtNote.setText(book.getNote());
      cboPublisher.setSelectedItem(book.getPub());
      // Output selected authors to right list
      List<Author> authors = book.getAuthors();
      for (Author a : authors) {
        modelSelectedAuthor.addElement(a);
        // Remove selected authors from left list
        modelAvailableAuthors.removeElement(a);
      }
      if(book.getUser().getUsername().equals(user.getUsername())) {
        btnDelete.enable(true);
      }
      
    } catch (Exception ex) {
      Logger.getLogger(EditBook.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel4 = new javax.swing.JLabel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    txtBookID = new javax.swing.JTextField();
    txtBookTitle = new javax.swing.JTextField();
    jLabel5 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    jLabel8 = new javax.swing.JLabel();
    jLabel9 = new javax.swing.JLabel();
    jLabel10 = new javax.swing.JLabel();
    cboPublisher = new javax.swing.JComboBox();
    jScrollPane1 = new javax.swing.JScrollPane();
    lstAvailableAuthors = new javax.swing.JList();
    jScrollPane2 = new javax.swing.JScrollPane();
    lstSelectedAuthors = new javax.swing.JList();
    btnAdd = new javax.swing.JButton();
    btnRemove = new javax.swing.JButton();
    jScrollPane3 = new javax.swing.JScrollPane();
    txtNote = new javax.swing.JTextArea();
    btnSave = new javax.swing.JButton();
    jLabel11 = new javax.swing.JLabel();
    btnDelete = new javax.swing.JButton();
    btnClose = new javax.swing.JButton();

    jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    jLabel4.setForeground(new java.awt.Color(255, 0, 0));
    jLabel4.setText("*");

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    jLabel1.setText("Book ID");

    jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    jLabel2.setText("Publisher");

    jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    jLabel3.setText("Book Title");

    jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    jLabel5.setForeground(new java.awt.Color(255, 0, 0));
    jLabel5.setText("*");

    jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    jLabel6.setForeground(new java.awt.Color(255, 0, 0));
    jLabel6.setText("*");

    jLabel7.setForeground(new java.awt.Color(255, 0, 0));
    jLabel7.setText("*: required field");

    jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    jLabel8.setForeground(new java.awt.Color(255, 0, 0));
    jLabel8.setText("*");

    jLabel9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel9.setText("Available Authors");

    jLabel10.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel10.setText("Available Authors");

    jScrollPane1.setViewportView(lstAvailableAuthors);

    jScrollPane2.setViewportView(lstSelectedAuthors);

    btnAdd.setText(">");
    btnAdd.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnAddActionPerformed(evt);
      }
    });

    btnRemove.setText("<");
    btnRemove.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnRemoveActionPerformed(evt);
      }
    });

    txtNote.setColumns(20);
    txtNote.setLineWrap(true);
    txtNote.setRows(5);
    txtNote.setWrapStyleWord(true);
    jScrollPane3.setViewportView(txtNote);

    btnSave.setText("Update");
    btnSave.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnSaveActionPerformed(evt);
      }
    });

    jLabel11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    jLabel11.setText("Notes");

    btnDelete.setText("Delete");
    btnDelete.setEnabled(false);
    btnDelete.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnDeleteActionPerformed(evt);
      }
    });

    btnClose.setText("Close");
    btnClose.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCloseActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(40, 40, 40)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel1)
          .addComponent(jLabel3)
          .addComponent(jLabel2)
          .addComponent(jLabel11))
        .addGap(40, 40, 40)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(layout.createSequentialGroup()
            .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jLabel5))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                  .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(18, 18, 18)
                  .addComponent(jLabel7)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                          .addGap(109, 109, 109)
                          .addComponent(jLabel10))
                        .addGroup(layout.createSequentialGroup()
                          .addGap(30, 30, 30)
                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                          .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                  .addGap(18, 18, 18)))
              .addGroup(layout.createSequentialGroup()
                .addComponent(txtBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(jLabel6)
              .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)))
          .addComponent(cboPublisher, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap(40, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(30, 30, 30)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel5))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(txtBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel6)
          .addComponent(jLabel3))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(cboPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2))
        .addGap(25, 25, 25)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel10)
          .addComponent(jLabel9)
          .addComponent(jLabel8))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(44, 44, 44)
            .addComponent(btnAdd)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(btnRemove))
          .addGroup(layout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addGap(25, 25, 25)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel11))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(btnSave)
          .addComponent(btnDelete)
          .addComponent(btnClose)
          .addComponent(jLabel7))
        .addContainerGap(30, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  // Validate date before editing the book
  public boolean validBook(Book b) throws Exception {
    // Title cannot be empty
    if (b.getTitle().isEmpty()) {
      JOptionPane.showMessageDialog(EditBook.this, "Book Title cannot be empty", "Alert", JOptionPane.ERROR_MESSAGE);
      txtBookTitle.requestFocus();
      return false;
    }

    // Authors cannot be empty
    if (modelSelectedAuthor.isEmpty()) {
      JOptionPane.showMessageDialog(EditBook.this, "Authors cannot be empty", "Alert", JOptionPane.ERROR_MESSAGE);
      lstAvailableAuthors.setSelectedIndex(0);
      return false;
    }

    return true;
  }

  // When users click on save/update button
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
      try {
        // Collect data on the form
        String bookID = txtBookID.getText().trim();
        String bookTitle = txtBookTitle.getText().trim();
        Publisher pub = ((Publisher) cboPublisher.getSelectedItem());
        String notes = txtNote.getText().trim();
        // Get a list of authors of the book
        List<Author> authors = Collections.list(modelSelectedAuthor.elements());
        Book book = new Book(bookID, bookTitle, notes, pub, authors);
        if (validBook(book)) {
          // Add to database
          myBook.bookController.editBook(book);
          JOptionPane.showMessageDialog(EditBook.this, "Updating book successfully");
          // Reload the list
          myBook.showAllBooks();
        }
      } catch (Exception ex) {
        Logger.getLogger(EditBook.class.getName()).log(Level.SEVERE, null, ex);
      }
    }//GEN-LAST:event_btnSaveActionPerformed

  // When users click on delete button
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
      try {
        // Confirm before delete
        if (JOptionPane.showConfirmDialog(EditBook.this, "Do you wanna delete this book?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
          myBook.bookController.deleteBook(txtBookID.getText());
          JOptionPane.showMessageDialog(EditBook.this, "A Book " + txtBookID.getText() + " has been deleted");
          dispose();
          // Reload the list
          myBook.showAllBooks();
        }
      } catch (Exception ex) {
        Logger.getLogger(EditBook.class.getName()).log(Level.SEVERE, null, ex);
      }
    }//GEN-LAST:event_btnDeleteActionPerformed

  // When users click on close button
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
      dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

  // When users select an author from the left list
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
      // Move selected Author from left list to right list
      int selectedRow = lstAvailableAuthors.getSelectedIndex();
      if (selectedRow != -1) {
        modelSelectedAuthor.addElement(modelAvailableAuthors.get(selectedRow));
        modelAvailableAuthors.remove(selectedRow);
      }
    }//GEN-LAST:event_btnAddActionPerformed

  // When users select an author from the right list
    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
      // Move selected Author from right list to left list
      int selectedRow = lstSelectedAuthors.getSelectedIndex();
      if (selectedRow != -1) {
        modelAvailableAuthors.addElement(modelSelectedAuthor.get(selectedRow));
        modelSelectedAuthor.remove(selectedRow);
      }
    }//GEN-LAST:event_btnRemoveActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(EditBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(EditBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(EditBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(EditBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        EditBook dialog = new EditBook(new javax.swing.JFrame(), true, user);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnAdd;
  private javax.swing.JButton btnClose;
  private javax.swing.JButton btnDelete;
  private javax.swing.JButton btnRemove;
  private javax.swing.JButton btnSave;
  private javax.swing.JComboBox cboPublisher;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel11;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JList lstAvailableAuthors;
  private javax.swing.JList lstSelectedAuthors;
  private javax.swing.JTextField txtBookID;
  private javax.swing.JTextField txtBookTitle;
  private javax.swing.JTextArea txtNote;
  // End of variables declaration//GEN-END:variables
}
